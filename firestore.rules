rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidTimestamp(timestamp) {
      return timestamp is timestamp && timestamp <= request.time;
    }
    
    function isValidNewUserData() {
      let data = request.resource.data;
      
      // All fields must be present for setDoc
      let hasRequiredFields = 
        data.userId != null &&
        data.createdAt != null &&
        data.updatedAt != null &&
        data.displayName != null &&
        data.email != null &&
        data.username != null &&
        data.photoURL != null;  // Can be null value, but field must exist
      
      // Validate field types
      let validTypes = 
        data.userId is string &&
        data.createdAt is timestamp &&
        data.updatedAt is timestamp &&
        data.displayName is string &&
        data.email is string &&
        data.username is string &&
        (data.photoURL == null || data.photoURL is string);
      
      // Validate timestamps
      let validTimestamps = 
        isValidTimestamp(data.createdAt) &&
        isValidTimestamp(data.updatedAt) &&
        data.updatedAt == data.createdAt;
      
      // Validate userId matches auth uid
      let validUserId = data.userId == request.auth.uid;
      
      // No length validation for initial creation - fields can be empty
      return hasRequiredFields && validTypes && validTimestamps && validUserId;
    }
    
    function isValidUserUpdate() {
      let data = request.resource.data;
      let existingData = resource.data;
      
      // Ensure required fields are not removed
      let requiredFields = ['userId', 'createdAt'];
      let hasRequiredFields = requiredFields.all(field => data[field] != null);
      
      // Validate field types if they are being updated
      let validTypes = 
        (!('createdAt' in data) || data.createdAt is timestamp) &&
        (!('displayName' in data) || data.displayName is string) &&
        (!('email' in data) || data.email is string) &&
        (!('updatedAt' in data) || data.updatedAt is timestamp) &&
        (!('userId' in data) || data.userId is string) &&
        (!('username' in data) || data.username is string) &&
        (!('photoURL' in data) || data.photoURL == null || data.photoURL is string);
      
      // Validate timestamps
      let validTimestamps = 
        (!('createdAt' in data) || data.createdAt == existingData.createdAt) &&  // createdAt should never change
        (!('updatedAt' in data) || (isValidTimestamp(data.updatedAt) && data.updatedAt > existingData.updatedAt));
      
      // Validate string lengths and patterns if they are being updated
      let validStrings = 
        (!('displayName' in data) || (data.displayName.size() >= 2)) &&
        (!('username' in data) || (data.username.size() >= 3 && data.username.size() <= 30));
      
      // Validate userId never changes
      let validUserId = !('userId' in data) || data.userId == existingData.userId;
      
      return hasRequiredFields && validTypes && validTimestamps && validStrings && validUserId;
    }
    
    // Users collection rules
    match /users/{userId} {
      // Allow read if authenticated
      allow read: if isAuthenticated();
      
      // Allow create if authenticated and data is valid
      allow create: if isAuthenticated() && isValidNewUserData();
      
      // Allow update if owner and data is valid
      allow update: if isOwner(userId) && isValidUserUpdate();
      
      // Allow delete if owner
      allow delete: if isOwner(userId);
    }
  }
}